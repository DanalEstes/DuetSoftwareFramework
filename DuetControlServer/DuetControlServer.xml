<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuetControlServer</name>
    </assembly>
    <members>
        <member name="T:DuetControlServer.Codes.GCodes">
            <summary>
            Static class that processes G-codes in the control server
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.GCodes.Process(DuetAPI.Commands.Code)">
            <summary>
            Process a G-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.GCodes.CodeExecuted(DuetAPI.Commands.Code,DuetAPI.Commands.CodeResult)">
            <summary>
            React to an executed G-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <param name="result">Result that it generated</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Codes.MCodes">
            <summary>
            Static class that processes M-codes in the control server
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.MCodes.Process(DuetAPI.Commands.Code)">
            <summary>
            Process an M-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.MCodes.CodeExecuted(DuetAPI.Commands.Code,DuetAPI.Commands.CodeResult)">
            <summary>
            React to an executed M-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <param name="result">Result that it generated</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Codes.TCodes">
            <summary>
            Static class that processes T-codes in the control server
            </summary>
        </member>
        <member name="M:DuetControlServer.Codes.TCodes.Process(DuetAPI.Commands.Code)">
            <summary>
            Process a T-code that should be interpreted by the control server
            </summary>
            <param name="code">Code to process</param>
            <returns>Result of the code if the code completed, else null</returns>
        </member>
        <member name="M:DuetControlServer.Codes.TCodes.CodeExecuted(DuetAPI.Commands.Code,DuetAPI.Commands.CodeResult)">
            <summary>
            React to an executed T-code before its result is returend
            </summary>
            <param name="code">Code processed by RepRapFirmware</param>
            <param name="result">Result that it generated</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Commands.Code">
            <summary>
            Implementation for G/M/T-code commands
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.#ctor">
            <summary>
            Creates a new Code instance
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.#ctor(System.String)">
            <summary>
            Creates a new Code instance and attempts to parse the given code string
            </summary>
            <param name="code">G/M/T-Code</param>
        </member>
        <member name="P:DuetControlServer.Commands.Code.IsFromConfig">
            <summary>
            Defines whether this code is part of config.g
            </summary>
        </member>
        <member name="P:DuetControlServer.Commands.Code.IsFromConfigOverride">
            <summary>
            Defines whether this code is part of config-override.g
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.Code.Run">
            <summary>
            Run an arbitrary G/M/T-code
            </summary>
            <returns>Code result instance</returns>
        </member>
        <member name="T:DuetControlServer.Commands.GetFileInfo">
            <summary>
            Implementation of the GetFileInfo command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.GetFileInfo.Run">
            <summary>
            Retrieves file information from the given filename
            </summary>
            <returns>File info</returns>
        </member>
        <member name="T:DuetControlServer.Commands.GetMachineModel">
            <summary>
            Implementation of the GetMachineModel command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.GetMachineModel.Run">
            <summary>
            Retrieve a copy of the current machine model
            </summary>
            <returns>Clone of the current machine model</returns>
        </member>
        <member name="T:DuetControlServer.Commands.ResolvePath">
            <summary>
            Implementation of the ResolvePath command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.ResolvePath.Run">
            <summary>
            Resolve the given RepRapFirmware-style filename to an absolute path
            </summary>
            <returns>Absolute file path</returns>
        </member>
        <member name="T:DuetControlServer.Commands.SimpleCode">
            <summary>
            Implementation of the SimpleCode command
            </summary>
        </member>
        <member name="M:DuetControlServer.Commands.SimpleCode.Run">
            <summary>
            Converts a simple G/M/T-code to a regular Code instance, executes it and returns its result as text
            </summary>
            <returns>G-code result</returns>
        </member>
        <member name="T:DuetControlServer.FileExecution.BaseFile">
            <summary>
            Base class for files that read G-codes line by line
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.FileName">
            <summary>
            File path to the file being executed
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.Channel">
            <summary>
            Channel to send the codes to
            </summary>
        </member>
        <member name="P:DuetControlServer.FileExecution.BaseFile.IsFinished">
            <summary>
            Indicates if the file has been finished
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.#ctor(System.String,DuetAPI.CodeChannel)">
            <summary>
            Create a file reader
            </summary>
            <param name="fileName">Name of the file to process</param>
            <param name="channel">Channel to send the codes to</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.ReadCode">
            <summary>
            Read the next available code
            </summary>
            <returns>Read code or null if none found</returns>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Seek(System.Int64)">
            <summary>
            Go to the specified position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:DuetControlServer.FileExecution.BaseFile.Abort">
            <summary>
            Request cancellation of this file
            </summary>
        </member>
        <member name="T:DuetControlServer.FileExecution.MacroFile">
            <summary>
            Implementation of a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile.ConfigFile">
            <summary>
            Default name of the config file
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile.ConfigFileFallback">
            <summary>
            Fallback file if the config file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile.ConfigOverrideFile">
            <summary>
            Config override as generated by M500
            </summary>
        </member>
        <member name="F:DuetControlServer.FileExecution.MacroFile._macroFiles">
            <summary>
            List of macro files being executed
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.AbortAllFiles(DuetAPI.CodeChannel)">
            <summary>
            Abort files on the given channel (probably because the firmware requested this)
            </summary>
            <param name="channel">Channel on which macros are supposed to be cancelled</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.AbortLastFile(DuetAPI.CodeChannel)">
            <summary>
            Abort the last file on the given channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.#ctor(System.String,DuetAPI.CodeChannel,System.Int32)">
            <summary>
            Create a new macro instance
            </summary>
            <param name="fileName">Filename of the macro</param>
            <param name="channel">Channel to send the codes to</param>
            <param name="sourceConnection">Source connection of this macro</param>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.ReadCode">
            <summary>
            Read another code from the file being executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.FileExecution.MacroFile.RunMacro">
            <summary>
            Execute the full macro file
            </summary>
            <returns>Results of the execution</returns>
        </member>
        <member name="T:DuetControlServer.FileExecution.Print">
            <summary>
            Implementation of a file being printed
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Start(System.String)">
            <summary>
            Begin a file print
            </summary>
            <param name="fileName">File to print</param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Paused(System.UInt32)">
            <summary>
            Called when the file print has been paused
            </summary>
            <param name="filePosition"></param>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Resume">
            <summary>
            Resume a paused print
            </summary>
        </member>
        <member name="M:DuetControlServer.FileExecution.Print.Cancel">
            <summary>
            Called when the file print has been cancelled
            </summary>
        </member>
        <member name="T:DuetControlServer.IPC.Connection">
            <summary>
            Wrapper around UNIX socket connections
            </summary>
        </member>
        <member name="P:DuetControlServer.IPC.Connection.IsConnected">
            <summary>
            Check the state of the connection
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Constructor for new connections
            </summary>
            <param name="socket">New UNIX socket</param>
            <param name="id">Connection ID</param>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.ReceiveJson">
            <summary>
            Read a generic JSON object from the socket
            </summary>
            <returns>Abstract JObject instance for deserialization</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.ReceiveCommand">
            <summary>
            Receive a fully-populated instance of a BaseCommand from the client
            </summary>
            <returns>Received command</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.GetCommandType(System.String)">
            <summary>
            Check the given command name
            </summary>
            <param name="name">Name of the command</param>
            <returns>Type of the command or null if none found</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.SendResponse(System.Object)">
            <summary>
            Send a standard Response, EmptyResponse or ErrorResponse asynchronously to the client.
            Depending on the type of the object it is encapsulated in a different container.
            </summary>
            <param name="obj">Object to send</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Send(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send a JSON object to the client
            </summary>
            <param name="obj">Object to send</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Send(System.String)">
            <summary>
            Send plain text to the client
            </summary>
            <param name="text">Text to send</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Connection.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Base">
            <summary>
            Base class for connection interpreters
            </summary>
            <seealso cref="T:DuetAPI.Connection.ConnectionMode"/>
        </member>
        <member name="P:DuetControlServer.IPC.Processors.Base.Connection">
            <summary>
            Connection with wrappers to ensure basic operation and convenience wrappers for JSON-style requests
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Base.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.ClientInitMessage)">
            <summary>
            Base constructor for connection interpreters. Invoke this from any derived class
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Deserialized initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Base.Process">
            <summary>
            Worker method for a given connection.
            No <see cref="T:System.Threading.CancellationToken"/> is passed here, use <see cref="F:DuetControlServer.Program.CancelSource"/> instead.
            Once this task exits the connection is terminated.
            </summary>
            <returns>Task that represents the worker lifecycle</returns>
            <exception cref="T:System.NotImplementedException">Thrown if this method is not overridden</exception>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Command">
            <summary>
            Command interpreter for client requests
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Command.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Command.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.ClientInitMessage)">
            <summary>
            Constructor of the command interpreter
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Command.Process">
            <summary>
            Reads incoming command requests and processes them. See <see cref="N:DuetAPI.Commands"/> namespace for a list
            of supported commands. The actual implementations can be found in <see cref="N:DuetControlServer.Commands"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Interception">
            <summary>
            Interception processor that notifies clients about G/M/T-codes being processed
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Interception.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.ClientInitMessage)">
            <summary>
            Constructor of the interception processor
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Process">
            <summary>
            Waits for commands to be received and enqueues them in a concurrent queue so that a <see cref="T:DuetAPI.Commands.Code"/>
            can decide when to resume/resolve the execution.
            </summary>
            <returns>Task that represents the lifecycle of the connection</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.EnqueueCommand(DuetAPI.Commands.BaseCommand)">
            <summary>
            Checks if the command request is allowed and enqueues it internally if that is the case.
            If it is illegal, an exception is thrown that can be sent back to the client.
            </summary>
            <param name="command">Command to enqueue</param>
            <returns>Task</returns>
            <exception cref="T:System.ArgumentException">Thrown if the command type is illegal</exception>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Intercept(DuetAPI.Commands.Code)">
            <summary>
            Called by the <see cref="T:DuetAPI.Commands.Code"/> implementation to check if the client wants to intercept a G/M/T-code
            </summary>
            <param name="code">Code to intercept</param>
            <returns>null if not intercepted or a <see cref="T:DuetAPI.Commands.CodeResult"/> instance if resolved</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Interception.Intercept(DuetAPI.Commands.Code,DuetAPI.Connection.InterceptionMode)">
            <summary>
            Called by the <see cref="T:DuetAPI.Commands.Code"/> class to intercept a code.
            This method goes through each connected interception channel and notifies the clients.
            </summary>
            <param name="code">Code to intercept</param>
            <param name="type">Type of the interception</param>
            <returns>null if not intercepted and a CodeResult otherwise</returns>
        </member>
        <member name="T:DuetControlServer.IPC.Processors.Subscription">
            <summary>
            Subscription processor that notifies clients about object model changes.
            There is no point in deserializing the object model here so only the JSON representation is kept here.
            </summary>
        </member>
        <member name="F:DuetControlServer.IPC.Processors.Subscription.SupportedCommands">
            <summary>
            List of supported commands in this mode
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.#ctor(DuetControlServer.IPC.Connection,DuetAPI.Connection.ClientInitMessage)">
            <summary>
            Constructor of the subscription processor
            </summary>
            <param name="conn">Connection instance</param>
            <param name="initMessage">Initialization message</param>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.Process">
            <summary>
            Task that keeps pushing model updates to the client
            </summary>
            <returns>Task that represents the lifecycle of a connection</returns>
        </member>
        <member name="M:DuetControlServer.IPC.Processors.Subscription.Update">
            <summary>
            Called to notify the subscribers about a model update
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.IPC.Server">
            <summary>
            Static class that holds main functionality for inter-process communication
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Server.CreateSocket">
            <summary>
            Create the UNIX socket for IPC
            </summary>
        </member>
        <member name="M:DuetControlServer.IPC.Server.AcceptConnections">
            <summary>
            Start accepting incoming connections.
            This represents the lifecycle of this class
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.IPC.Server.Shutdown">
            <summary>
            Close every connection and clean up the UNIX socket
            </summary>
        </member>
        <member name="T:DuetControlServer.Model.Provider">
            <summary>
            Provider for the machine's object model to provides thread-safe read/write access.
            Make sure to access the machine model only when atomic operations are performed
            so that pending updates can be performed as quickly as possible.
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Provider.Init">
            <summary>
            Initialize the object model provider
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Provider.AccessReadOnly">
            <summary>
            Access the machine model for read operations only
            </summary>
            <returns>Disposable lock object to be used with a using directive</returns>
        </member>
        <member name="M:DuetControlServer.Model.Provider.AccessReadWrite">
            <summary>
            Access the machine model for read/write operations
            </summary>
            <returns>Disposable lock object to be used with a using directive</returns>
        </member>
        <member name="P:DuetControlServer.Model.Provider.Get">
            <summary>
            Get the machine model. Make sure to call the acquire the corresponding lock first!
            </summary>
            <returns>Current Duet machine object model</returns>
            <seealso cref="M:DuetControlServer.Model.Provider.AccessReadOnly"/>
            <seealso cref="M:DuetControlServer.Model.Provider.AccessReadWrite"/>
        </member>
        <member name="T:DuetControlServer.Model.Updater">
            <summary>
            Static helper class to merge the RepRapFirmware object model with ours
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.Updater.MergeData(System.Byte,System.String)">
            <summary>
            Merge received data into the object model
            </summary>
            <param name="module">Module that is supposed to be merged</param>
            <param name="json">JSON data</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Model.UpdateTask">
            <summary>
            Static class that updates the machine model in certain intervals
            </summary>
        </member>
        <member name="M:DuetControlServer.Model.UpdateTask.UpdatePeriodically">
            <summary>
            Run model updates in a certain interval.
            This function updates host properties like network interfaces and storage devices
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.Settings">
            <summary>
            Settings provider
            </summary>
            <remarks>This class cannot be static because JSON.NET requires an instance for deserialization</remarks>
        </member>
        <member name="P:DuetControlServer.Settings.SocketPath">
            <summary>
            Path to the UNIX socket for IPC
            </summary>
            <seealso cref="N:DuetAPI"/>
        </member>
        <member name="P:DuetControlServer.Settings.Backlog">
            <summary>
            Maximum number of pending IPC connection
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.BaseDirectory">
            <summary>
            Virtual SD card directory.
            Paths starting with 0:/ are mapped to this directory
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.HostUpdateInterval">
            <summary>
            Internal model update interval after which properties of the machine model from
            the host controller (e.g. network information and mass storages) are updated (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiBusID">
            <summary>
            Bus ID of the SPI device that is connected to RepRapFirmware (on Linux the format is /dev/spidev{bus}.{csline})
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiChipSelectLine">
            <summary>
            Chip select line of the SPI device that is connected to RepRapFirmware (on Linux the format is /dev/spidev{bus}.{csline})
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiTimeout">
            <summary>
            Maximum time to wait for the RepRapFirmware controller (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SpiPollDelay">
            <summary>
            Time to wait after every transfer (in ms)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.TransferReadyPin">
            <summary>
            Number of the GPIO pin that is used by RepRapFirmware to flag its ready state
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FileInfoReadLimit">
            <summary>
            How many bytes to parse max at the beginning and end of a file to retrieve G-code file information
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.MaxLayerHeight">
            <summary>
            Maximum allowed layer height. Used by the file info parser
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.LayerHeightFilters">
            <summary>
            Regular expressions for finding the layer height (case insensitive)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.FilamentFilters">
            <summary>
            Regular expressions for finding the filament consumption (case insensitive, single line)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.GeneratedByFilters">
            <summary>
            Regular expressions for finding the slicer (case insensitive)
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.PrintTimeFilters">
            <summary>
            Regular expressions for finding the print time
            </summary>
        </member>
        <member name="P:DuetControlServer.Settings.SimulatedTimeFilters">
            <summary>
            Regular expressions for finding the simulated time
            </summary>
        </member>
        <member name="M:DuetControlServer.Settings.Load(System.String[])">
            <summary>
            Load settings from the config file or create it if it does not already exist
            </summary>
            <param name="args">Command-line arguments</param>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.Consts">
            <summary>
            Static class holding SPI transfer constants
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.FormatCode">
            <summary>
            Unique format code for binary SPI transfers
            </summary>
            <remarks>Must be different from any other used format code (0x3E = DuetWiFiServer)</remarks>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.InvalidFormatCode">
            <summary>
            Unique format code that is not used anywhere else
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.ProtocolVersion">
            <summary>
            Used protocol version. This is incremented whenever the protocol details change
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.BufferSize">
            <summary>
            Size of a packet transfer buffer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.NumModules">
            <summary>
            Number of RepRapFirmware modules that can be queried via <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel"/>.
            This equals the number of RepRapFirmware modules minus 1 (because LinuxComm does not have an object model)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.Consts.MaxCodeBufferSize">
            <summary>
            Maximum size of a binary encoded G/M/T-code. This is limited by RepRapFirmware
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest">
            <summary>
            Request abort of the currently executing files
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest.Channel">
            <summary>
            Code channel running the file(s)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply">
            <summary>
            Response to a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code"/> request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.MessageType">
            <summary>
            Message type describing the message
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.MessageType"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReply.Length">
            <summary>
            Length of the reply in bytes
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags">
            <summary>
            Flags describing the message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Warning">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Error">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.Push">
            <summary>
            There is more to come in the next transmission
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.CodeReplyFlags.CodeComplete">
            <summary>
            This is a final code response
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap">
            <summary>
            Header for heightmap reports
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.XMin">
            <summary>
            X start coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.XMax">
            <summary>
            X end coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.XSpacing">
            <summary>
            Spacing between the probe points in X direction
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.YMin">
            <summary>
            Y start coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.YMax">
            <summary>
            Y end coordinate of the heightmap
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.YSpacing">
            <summary>
            Spacing between the probe points in Y direction
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.Radius">
            <summary>
            Probing radius on delta geometries
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap.NumPoints">
            <summary>
            Number of probe points
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest">
            <summary>
            Request the execution of a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.Channel">
            <summary>
            Channel to pipe the macro content into
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.ReportMissing">
            <summary>
            Output a warning message if the file could not be found
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest.Length">
            <summary>
            Length of the filename
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused">
            <summary>
            Header for print pause events
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused.FilePosition">
            <summary>
            Position at which the file has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused.PauseReason">
            <summary>
            Reason why the print has been paused
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.PrintPausedReason"/>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.Request">
            <summary>
            Request indices for SPI transfers from the RepRapFirmware controller to the Linux board
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ResendPacket">
            <summary>
            Request retransmission of the given packet.
            This is always guaranteed to work in case RRF does not have not enough resources are available to process the packet
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ReportState">
            <summary>
            Response to the state request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ObjectModel">
            <summary>
            Response to an object model request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.CodeReply">
            <summary>
            Response to a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ExecuteMacro">
            <summary>
            Request execution of a macro file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.AbortFile">
            <summary>
            Request all files of the code channel to be closed
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.StackEvent">
            <summary>
            Stack has been changed
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.PrintPaused">
            <summary>
            Print has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.HeightMap">
            <summary>
            Response to a heightmap request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.Locked">
            <summary>
            Ressource locked
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags">
            <summary>
            Flags of the stack
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.DrivesRelative">
            <summary>
            Whether the extruder drives are driven in relative mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.AxesRelative">
            <summary>
            Whether the axes are driven in relative mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags.UsingInches">
            <summary>
            Whether the configured unit is set to inches
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent">
            <summary>
            Header for stack events
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Channel">
            <summary>
            Code channel where the event occurred
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.StackDepth">
            <summary>
            New depth of the stack
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Flags">
            <summary>
            Stack flags
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent.Feedrate">
            <summary>
            Feedrate in mm/s
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.FirmwareRequests.StateResponse">
            <summary>
            Response to a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetState"/> request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.FirmwareRequests.StateResponse.BusyChannels">
            <summary>
            Bitmap of the code channels that are currently busy
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeFlags">
            <summary>
            Flags of a G/M/T-code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeFlags.NoMajorCommandNumber">
            <summary>
            No major command number set
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeFlags.NoMinorCommandNumber">
            <summary>
            No minor command number set
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeFlags.FilePositionValid">
            <summary>
            Indicates if the file position is valid
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeFlags.EnforceAbsolutePosition">
            <summary>
            Indicates that G53 was used with this code
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader">
            <summary>
            Header of G/M/T-codes. This is followed by NumParameters <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter"/> instances,
            which is then followed by concatenated zero-terminated UTF8-strings for each parameter where applicable.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Channel">
            <summary>
            Target of the code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Flags">
            <summary>
            Flags of this code
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.NumParameters">
            <summary>
            Number of parameters following the 
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.Letter">
            <summary>
            Letter of this code (G/M/T)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.MajorCode">
            <summary>
            Major code number (e.g. 1 in G1)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.MinorCode">
            <summary>
            Minor code number (e.g. 4 in G53.4)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader.FilePosition">
            <summary>
            Position from which the code was read. This is used for pausing and resuming
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter">
            <summary>
            Binary representation of a code parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.Letter">
            <summary>
            Letter prefix of this parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.IntValue">
            <summary>
            Value as integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.UIntValue">
            <summary>
            Value as unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.CodeParameter.FloatValue">
            <summary>
            Value as float
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.DataType">
            <summary>
            Enum representing the allowed binary data types of parameters
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Int">
            <summary>
            Parameter is a signed integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.UInt">
            <summary>
            Parameter is an unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Float">
            <summary>
            Parameter is a float
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.IntArray">
            <summary>
            Parameter is a signed integer array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.UIntArray">
            <summary>
            Parameter is an unsigned integer array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.FloatArray">
            <summary>
            Parameter is a float array
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.String">
            <summary>
            Parameter is a UTF-8 string
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.DataType.Expression">
            <summary>
            Parameter is an expression
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted">
            <summary>
            Indicate that a macro has finished its execution
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted.Channel">
            <summary>
            Channel on which the execution was done
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted.Error">
            <summary>
            Error flag. This is true if the file could not be found or opened
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted">
            <summary>
            Set file print info. This is followed by NumFilament floats representing
            the filament consumption and the actual name of the file being printed.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FileSize">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.LastModifiedTime">
            <summary>
            Time the file was last modified (as time_t / 64-bit unsigned int).
            This is represented as the seconds elapsed since Jan 1 1970
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.LayerHeight">
            <summary>
            Height of the layers in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FirstLayerHeight">
            <summary>
            Height of the first layer in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.ObjectHeight">
            <summary>
            Total object height in mm
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.PrintTime">
            <summary>
            Total print time in seconds
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.SimulatedTime">
            <summary>
            Simulated print time in seconds
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.FilenameLength">
            <summary>
            Length of the filename
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.GeneratedByLength">
            <summary>
            Length of the slicer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted.NumFilaments">
            <summary>
            Number of filaments used
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped">
            <summary>
            Header for print stop notifications
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped.Reason">
            <summary>
            Reason why the print has been stopped
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.Request">
            <summary>
            Request indices for SPI transfers from the Linux board to the RepRapFirmware controller
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetState">
            <summary>
            Request state of the GCode buffers
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.EmergencyStop">
            <summary>
            Perform an immediate emergency stop
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Reset">
            <summary>
            Reset the controller
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code">
            <summary>
            Request the execution of a G/M/T-code
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.CodeHeader"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel">
            <summary>
            Request a part of the machine's object model
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.SetObjectModel">
            <summary>
            Set a value in the machine's object model (reserved)
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.PrintStarted">
            <summary>
            Tell the firmware a print has started and set information about the file being processed
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStarted"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.PrintStopped">
            <summary>
            Tell the firmware a print has been stopped and reset information about the file being processed
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.PrintStopped"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.MacroCompleted">
            <summary>
            Notify the firmware about the completion of a macro file
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.MacroCompleted"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetHeightMap">
            <summary>
            Request the heightmap coordinates as generated by G29
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.LockMovementAndWaitForStandstill">
            <summary>
            Lock movement and wait for standstill
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.UnlockAll">
            <summary>
            Unlock everything again
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel">
            <summary>
            Set an arbitrary object model value that is accessible via a field path.
            This struct is followed by the UTF-8 path to the object model value
            and optionally the value as string / expression.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.Type">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.FieldLength">
            <summary>
            Length of the field
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.IntValue">
            <summary>
            Value as integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.UIntValue">
            <summary>
            Value as unsigned integer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel.FloatValue">
            <summary>
            Value as float
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.MessageTypeFlags">
            <summary>
            Message type flags describing a code reply. This is equal to MessageType in RepRapFirmware.
            Make sure to keep the destinations in sync with the <see cref="T:DuetAPI.CodeChannel"/> entries
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.HttpMessage">
            <summary>
            A message that is to be sent to the web (HTTP)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.TelnetMessage">
            <summary>
            A message that is to be sent to a Telnet client
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.FileMessage">
            <summary>
            A message that is to be sent to a file processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.UsbMessage">
            <summary>
            A message that is to be sent in non-blocking mode to the host via USB
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.AuxMessage">
            <summary>
            A message that is to be sent to the panel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.DaemonMessage">
            <summary>
            A message that is to be sent to a daemon processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.CodeQueueMessage">
            <summary>
            A message that is to be sent to the code queue channel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.LcdMessage">
            <summary>
            A message that is to be sent to the panel
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.SpiMessage">
            <summary>
            A message that is to be sent to the SPI master
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.AutoPauseMessage">
            <summary>
            A message that is to be sent to an auto-pause processor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.BlockingUsbMessage">
            <summary>
            A message that is to be sent to USB in blocking mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.ImmediateLcdMessage">
            <summary>
            A message that is to be sent to LCD in immediate mode
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.ErrorMessageFlag">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.WarningMessageFlag">
            <summary>
            This is a warning message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.LogMessage">
            <summary>
            A message to be written to the log file
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.RawMessageFlag">
            <summary>
            Do not encapsulate this message
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.BinaryCodeReplyFlag">
            <summary>
            This message comes from a binary G-Code buffer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.MessageTypeFlags.PushFlag">
            <summary>
            There is more to come; the message has been truncated
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PacketHeader">
            <summary>
            Header used for single packets from and to the RepRapFirmware board
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Request">
            <summary>
            Identifier of this request
            </summary>
            <seealso cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.Request"/>
            <seealso cref="T:DuetControlServer.SPI.Communication.LinuxRequests.Request"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Id">
            <summary>
            Identifier of the packet
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.Length">
            <summary>
            Length of the packet in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PacketHeader.ResendPacketId">
            <summary>
            Identifier of the packet that is supposed to be resend (defaults to 0)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PrintPausedReason">
            <summary>
            Reasons why a print has been paused
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.User">
            <summary>
            User-initiated pause (M26)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.GCode">
            <summary>
            G-Code initiated pause (M226)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.FilamentChange">
            <summary>
            Filament change required (M600)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Trigger">
            <summary>
            Paused by trigger
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.HeaterFault">
            <summary>
            Paused due to heater fault
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Filament">
            <summary>
            Paused because of a filament sensor
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.Stall">
            <summary>
            Paused due to a motor stall
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintPausedReason.LowVoltage">
            <summary>
            Paused due to a voltage drop
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.PrintStoppedReason">
            <summary>
            Reason why the print has been stopped
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.NormalCompletion">
            <summary>
            Print has finished successfully
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.UserCancelled">
            <summary>
            User has cancelled the print
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.PrintStoppedReason.Abort">
            <summary>
            Print has been aborted
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.SharedRequests.LockUnlock">
            <summary>
            Header describing a response to a lock resource request
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.LockUnlock.Channel">
            <summary>
            Channel which has locked or unlocked the resource
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel">
            <summary>
            Shared header for the <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel"/> and <see cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.ObjectModel"/> requests
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel.Length">
            <summary>
            Length of the data in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel.Module">
            <summary>
            Number of the module that this response provides data for
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.TransferHeader">
            <summary>
            Header describing the content of a full SPI transfer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.FormatCode">
            <summary>
            Unique number representing the format used for this type of data transfer
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.Consts.FormatCode"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.NumPackets">
            <summary>
            Number of packets in the data transfer
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ProtocolVersion">
            <summary>
            Version of the protocol. This is incremented whenever the protocol details change
            </summary>
            <seealso cref="F:DuetControlServer.SPI.Communication.Consts.ProtocolVersion"/>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.SequenceNumber">
            <summary>
            Sequence number (auto-incremented), used to detect resets on either side
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.DataLength">
            <summary>
            Total length of the data transfer in bytes
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ChecksumData">
            <summary>
            CRC16 checksum of the transfer data (reserved)
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferHeader.ChecksumHeader">
            <summary>
            CRC16 checksum of the transfer header (reserved)
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Communication.TransferResponse">
            <summary>
            Result code of header and data transfers
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.Success">
            <summary>
            Transfer is OK
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadFormat">
            <summary>
            Bad transfer format
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadProtocolVersion">
            <summary>
            Bad protocol version
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.BadChecksum">
            <summary>
            Bad checksum
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Communication.TransferResponse.RequestStateReset">
            <summary>
            Request state reset
            </summary>
            <remarks>This must remain the last entry until checksums have been implemented</remarks>
        </member>
        <member name="T:DuetControlServer.SPI.DataTransfer">
            <summary>
            Helper class for SPI data transfers
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.Initialize">
            <summary>
            Set up the SPI device and the controller for the transfer ready pin
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.PerformFullTransfer">
            <summary>
            Perform a full data transfer
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadPacket">
            <summary>
            Read the next packet
            </summary>
            <returns>The next packet or null if none is available</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadState(System.Int32@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetState"/> request
            </summary>
            <param name="busyChannels"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadObjectModel(System.Byte@,System.String@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetObjectModel"/> request
            </summary>
            <param name="module"></param>
            <param name="json"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadCodeReply(DuetControlServer.SPI.Communication.MessageTypeFlags@,System.String@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.Code"/> request
            </summary>
            <param name="messageType"></param>
            <param name="reply"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadMacroRequest(DuetAPI.CodeChannel@,System.Boolean@,System.String@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.MacroRequest"/> packet
            </summary>
            <param name="channel"></param>
            <param name="reportMissing"></param>
            <param name="filename"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadAbortFile(DuetAPI.CodeChannel@)">
            <summary>
            Read the content of an <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.AbortFileRequest"/> packet
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadStackEvent(DuetAPI.CodeChannel@,System.Byte@,DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags@,System.Single@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.StackEvent"/> packet
            </summary>
            <param name="channel"></param>
            <param name="stackDepth"></param>
            <param name="flags"></param>
            <param name="feedrate"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadPrintPaused(System.UInt32@,DuetControlServer.SPI.Communication.PrintPausedReason@)">
            <summary>
            Read the content of a <see cref="T:DuetControlServer.SPI.Communication.FirmwareRequests.PrintPaused"/> packet
            </summary>
            <param name="filePosition"></param>
            <param name="reason"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadHeightMap(DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap@,System.Single[]@)">
            <summary>
            Read the result of a <see cref="F:DuetControlServer.SPI.Communication.LinuxRequests.Request.GetHeightMap"/> request
            </summary>
            <param name="header"></param>
            <param name="zCoordinates"></param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ReadResourceLocked(DuetAPI.CodeChannel@)">
            <summary>
            Read the content of a <see cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.Locked"/> packet
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.DumpMalformedPacket">
            <summary>
            Write the last packet + content for diagnostic purposes
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.ResendPacket(DuetControlServer.SPI.Communication.PacketHeader)">
            <summary>
            Resend a packet back to the firmware
            </summary>
            <param name="packet">Packet holding the resend request</param>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteGetState">
            <summary>
            Request the GCodeBuffer states from the firmware
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteEmergencyStop">
            <summary>
            Request an emergency stop
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteReset">
            <summary>
            Request a firmware reset
            </summary>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteCode(DuetControlServer.Commands.Code)">
            <summary>
            Request a code to be executed
            </summary>
            <param name="code">Code to send</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteGetObjectModel(System.Byte)">
            <summary>
            Request the object module of a specific module
            </summary>
            <param name="module">Module index to query</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteSetObjectModel(System.String,System.Object)">
            <summary>
            Set a specific value in the object model of RepRapFirmware
            </summary>
            <param name="field">Path to the field</param>
            <param name="value">New value</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WritePrintStarted(DuetAPI.ParsedFileInfo)">
            <summary>
            Notify the firmware that a file print has started
            </summary>
            <param name="info">Information about the file being printed</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WritePrintStopped(DuetControlServer.SPI.Communication.PrintStoppedReason)">
            <summary>
            Notify that a file print has been stopped
            </summary>
            <param name="reason">Reason why the print has been stopped</param>
            <returns>True if the packet could be written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteMacroCompleted(DuetAPI.CodeChannel,System.Boolean)">
            <summary>
            Notify the firmware about completed macro file
            </summary>
            <param name="channel">Code channel of the finished macro</param>
            <param name="error">Whether an error occurred</param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteGetHeightMap">
            <summary>
            Request the heightmap from the firmware
            </summary>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteLockMovementAndWaitForStandstill(DuetAPI.CodeChannel)">
            <summary>
            Request the movement to be locked and wait for standstill
            </summary>
            <param name="channel">Code channel that requires the lock</param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.DataTransfer.WriteUnlock(DuetAPI.CodeChannel)">
            <summary>
            Release all acquired locks again
            </summary>
            <param name="channel">Code channel that releases the locks</param>
            <returns></returns>
        </member>
        <member name="T:DuetControlServer.SPI.Interface">
            <summary>
            This class accesses RepRapFirmware via SPI and deals with general communication
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Init">
            <summary>
            Initialize the SPI interface but do not connect yet
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.ProcessCode(DuetControlServer.Commands.Code)">
            <summary>
            Execute a G/M/T-code and wait asynchronously for its completion
            </summary>
            <param name="code">Code to execute</param>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.ProcessSystemCode(DuetControlServer.Commands.Code)">
            <summary>
            Enqueue this code to be executed but don't wait for it.
            This is used for macro files requested from the firmware
            </summary>
            <param name="code">Code to execute</param>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Connect">
            <summary>
            Initialize physical transfer and perform initial data transfer
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Interface.Run">
            <summary>
            Perform communication with the RepRapFirmware controller
            </summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:DuetControlServer.SPI.QueuedCode">
            <summary>
            Class that represents a queued code item.
            There is no need to serialize/deserialize data, so no properties in here 
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.#ctor(DuetControlServer.Commands.Code,System.Boolean)">
            <summary>
            Constructor for a queued code
            </summary>
            <param name="code">Code to execute</param>
            <param name="fromFirmwareRequest">Whether this code comes from a firmware request</param>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.Code">
            <summary>
            Code item to execute
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.IsExecuting">
            <summary>
            Whether the code is already being executed
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.CanFinish">
            <summary>
            Whether a code reply has been received for this code indicating if it can be finished
            </summary>
        </member>
        <member name="P:DuetControlServer.SPI.QueuedCode.Task">
            <summary>
            Task that is resolve when the code has finished.
            May be null if the code is supposed to be a firmware request
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.HandleReply(DuetControlServer.SPI.Communication.MessageTypeFlags,System.String)">
            <summary>
            Process a code reply from the firmware
            </summary>
            <param name="messageType">Message type flags</param>
            <param name="reply">Raw code reply</param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.SetException(System.Exception)">
            <summary>
            Something went wrong while executing this code
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DuetControlServer.SPI.QueuedCode.SetFinished">
            <summary>
            Called to resolve the task because it has finished
            </summary>
        </member>
        <member name="T:DuetControlServer.SPI.Serialization.Reader">
            <summary>
            Static class for reading data from SPI transmissions.
            It is expected that each data block occupies entire 4-byte blocks.
            Make sure to keep the data returned by these functions only as long as the underlying buffer is actually valid!
            </summary>
            <remarks>Once .NET Core 3.0 is out, the performance of this can be further improved (without relying on unsafe code) by using <c>Span.AsRef()</c></remarks>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadPacketHeader(System.Span{System.Byte})">
            <summary>
            Read a packet header from a memory span
            </summary>
            <param name="from">Origin</param>
            <returns>Header describing a packet</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadState(System.Span{System.Byte},System.Int32@)">
            <summary>
            Read the current state of the code buffers
            </summary>
            <param name="from">Origin</param>
            <param name="busyChannels">Bitmap of the busy channels</param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadObjectModel(System.Span{System.Byte},System.Byte@,System.String@)">
            <summary>
            Read an object model header plus JSON text from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="module">Number of the module from which the JSON data originates</param>
            <param name="json">Object model data as JSON or null if none available</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadCodeReply(System.Span{System.Byte},DuetControlServer.SPI.Communication.MessageTypeFlags@,System.String@)">
            <summary>
            Read a code reply from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="messageType">Message flags</param>
            <param name="reply">Raw code reply</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadMacroRequest(System.Span{System.Byte},DuetAPI.CodeChannel@,System.Boolean@,System.String@)">
            <summary>
            Read a macro file request from a memory span
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel that requested the execution</param>
            <param name="reportMissing">Output a message if the macro cannot be found</param>
            <param name="filename">Filename of the macro to execute</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadAbortFile(System.Span{System.Byte},DuetAPI.CodeChannel@)">
            <summary>
            Read information about an abort file request 
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel running the file</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadStackEvent(System.Span{System.Byte},DuetAPI.CodeChannel@,System.Byte@,DuetControlServer.SPI.Communication.FirmwareRequests.StackFlags@,System.Single@)">
            <summary>
            Read a stack event
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Code channel where the stack event occurred</param>
            <param name="stackDepth">New stack depth</param>
            <param name="flags">Flags of the stack</param>
            <param name="feedrate">Feedrate in mm/s</param>
            <returns>Number of bytes read</returns>
            <seealso cref="F:DuetControlServer.SPI.Communication.FirmwareRequests.Request.StackEvent"/>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadPrintPaused(System.Span{System.Byte},System.UInt32@,DuetControlServer.SPI.Communication.PrintPausedReason@)">
            <summary>
            Read a print pause event
            </summary>
            <param name="from">Origin</param>
            <param name="filePosition">Position at which the print has been paused</param>
            <param name="reason">Reason why the print has been paused</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadHeightMap(System.Span{System.Byte},DuetControlServer.SPI.Communication.FirmwareRequests.HeightMap@,System.Single[]@)">
            <summary>
            Read a heightmap report
            </summary>
            <param name="from">Origin</param>
            <param name="header"></param>
            <param name="zCoordinates"></param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Reader.ReadResourceLocked(System.Span{System.Byte},DuetAPI.CodeChannel@)">
            <summary>
            Read a lock confirmation
            </summary>
            <param name="from">Origin</param>
            <param name="channel">Channel that has acquired the lock</param>
            <returns></returns>
        </member>
        <member name="T:DuetControlServer.SPI.Serialization.Writer">
            <summary>
            Static class for writing data for SPI transmissions.
            This class makes sure each data block is on a 4-byte boundary to guarantee efficient DMA transfers on the remote side.
            </summary>
        </member>
        <member name="F:DuetControlServer.SPI.Serialization.Writer.TransmissionHeaderSize">
            <summary>
            Size of a transmission header
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.InitTransferHeader(DuetControlServer.SPI.Communication.TransferHeader@)">
            <summary>
            Initialize a transfer header
            </summary>
            <param name="header">Header reference to initialize</param>
        </member>
        <member name="F:DuetControlServer.SPI.Serialization.Writer.PacketHeaderSize">
            <summary>
            Size of a packet header
            </summary>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePacketHeader(System.Span{System.Byte},DuetControlServer.SPI.Communication.LinuxRequests.Request,System.UInt16,System.Int32)">
            <summary>
            Write an arbitrary packet header to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="request">Packet type</param>
            <param name="id">Packet ID</param>
            <param name="length">Length of the packet</param>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteCode(System.Span{System.Byte},DuetControlServer.Commands.Code)">
            <summary>
            Write a parsed G/M/T code in binary format to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="code">Code to write</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteObjectModelRequest(System.Span{System.Byte},System.Byte)">
            <summary>
            Write a <see cref="T:DuetControlServer.SPI.Communication.SharedRequests.ObjectModel"/> request to a memory span
            </summary>
            <param name="to">Destination</param>
            <param name="module">Module to query the object model from</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteObjectModel(System.Span{System.Byte},System.String,System.Object)">
            <summary>
            Request the update of an object model field to an arbitrary value via a <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.SetObjectModel"/> request
            </summary>
            <param name="to">Destination</param>
            <param name="field">Path to the object model field</param>
            <param name="value">New value</param>
            <returns>Number of bytes written</returns>
            <remarks>value must be of type <see cref="T:DuetControlServer.SPI.Communication.LinuxRequests.DataType"/></remarks>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePrintStarted(System.Span{System.Byte},DuetAPI.ParsedFileInfo)">
            <summary>
            Notify the firmware that a print has started
            </summary>
            <param name="to">Destination</param>
            <param name="info">Information about the file being printed</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WritePrintStopped(System.Span{System.Byte},DuetControlServer.SPI.Communication.PrintStoppedReason)">
            <summary>
            Notify the firmware that a print has been stopped
            </summary>
            <param name="to"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteMacroCompleted(System.Span{System.Byte},DuetAPI.CodeChannel,System.Boolean)">
            <summary>
            Write notification about a completed macro file
            </summary>
            <param name="to">Destination</param>
            <param name="channel">Channel where the macro file has finished</param>
            <param name="error">Whether an error occurred when trying to open/process the macro file</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:DuetControlServer.SPI.Serialization.Writer.WriteLockUnlock(System.Span{System.Byte},DuetAPI.CodeChannel)">
            <summary>
            Request a resource to be locked or unlocked
            </summary>
            <param name="to"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="T:DuetControlServer.FileInfoParser">
            <summary>
            Static class used to retrieve information from G-code jobs
            </summary>
        </member>
        <member name="M:DuetControlServer.FileInfoParser.Parse(System.String)">
            <summary>
            Parse a G-code file
            </summary>
            <param name="fileName">File to analyze</param>
            <returns>Information about the file</returns>
        </member>
        <member name="T:DuetControlServer.FilePath">
            <summary>
            Static class used to provide functions for file path resolution
            </summary>
        </member>
        <member name="M:DuetControlServer.FilePath.ToPhysical(System.String,System.String)">
            <summary>
            Resolve a RepRapFirmware/FatFs-style file path to a physical file path.
            The first drive (0:/) is reserved for usage with the base directory as specified in the settings.
            </summary>
            <param name="filePath">File path to resolve</param>
            <param name="directory">Directory of the file path if none is specified</param>
            <returns>Resolved file path</returns>
        </member>
        <member name="M:DuetControlServer.FilePath.ToVirtual(System.String)">
            <summary>
            Convert a physical ile path to a RRF-style file path.
            The first drive (0:/) is reserved for usage with the base directory as specified in the settings.
            </summary>
            <param name="filePath">File path to convert</param>
            <returns></returns>
        </member>
        <member name="T:DuetControlServer.Log">
            <summary>
            Static class used for message logging via the object model
            </summary>
        </member>
        <member name="M:DuetControlServer.Log.LogInfo(System.String)">
            <summary>
            Log an information message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DuetControlServer.Log.LogWarning(System.String)">
            <summary>
            Log a warning message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DuetControlServer.Log.LogError(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
