using System;
using System.Collections.Generic;
using System.Linq;

namespace DuetAPI.Machine
{
    /// <summary>
    /// Representation of the full machine model.
    /// 
    /// In the future this class will be further expanded by INotifyPropertyChanged and IObservableCollection interfaces.
    /// </summary>
    public class MachineModel : ICloneable
    {
        /// <summary>
        /// Information about every available G/M/T-code channel
        /// </summary>
        public Channels Channels { get; set; } = new Channels();

        /// <summary>
        /// Information about the main and expansion boards
        /// </summary>
        public Electronics Electronics { get; set; } = new Electronics();
        
        /// <summary>
        /// Information about the fans
        /// </summary>
        /// <seealso cref="Fan"/>
        public List<Fan> Fans { get; set; } = new List<Fan>();
        
        /// <summary>
        /// Information about the heat subsystem
        /// </summary>
        public Heat Heat { get; set; } = new Heat();
        
        /// <summary>
        /// Information about the current file job (if any)
        /// </summary>
        public Job Job { get; set; } = new Job();
        
        /// <summary>
        /// Information about message box requests
        /// </summary>
        public MessageBox MessageBox { get; set; } = new MessageBox();
        
        /// <summary>
        /// Generic messages that do not belong explicitly to codes being executed.
        /// This includes status messages, generic errors and outputs generated by M118
        /// </summary>
        /// <seealso cref="Message"/>
        public List<Message> Messages { get; set; } = new List<Message>();
        
        /// <summary>
        /// Information about the move subsystem
        /// </summary>
        public Move Move { get; set; } = new Move();
        
        /// <summary>
        /// Information about connected network adapters
        /// </summary>
        public Network Network { get; set; } = new Network();
        
        /// <summary>
        /// Information about the 3D scanner subsystem
        /// </summary>
        public Scanner Scanner { get; set; } = new Scanner();
        
        /// <summary>
        /// Information about connected sensors including Z-probes and endstops
        /// </summary>
        public Sensors Sensors { get; set; } = new Sensors();
        
        /// <summary>
        /// Information about CNC spindles
        /// </summary>
        /// <seealso cref="Spindle"/>
        public List<Spindle> Spindles { get; set; } = new List<Spindle>();
        
        /// <summary>
        /// Information about the machine state
        /// </summary>
        public State State { get; set; } = new State();
        
        /// <summary>
        /// Information about the configured storage systems
        /// </summary>
        /// <seealso cref="Storage"/>
        public List<Storage> Storages { get; set; } = new List<Storage>();
        
        /// <summary>
        /// Information about configured tools
        /// </summary>
        /// <seealso cref="Tool"/>
        public List<Tool> Tools { get; set; } = new List<Tool>();

        /// <summary>
        /// Creates a duplicate of the full object model
        /// </summary>
        /// <returns>A clone of this model</returns>
        public object Clone()
        {
            return new MachineModel
            {
                Channels = (Channels)Channels.Clone(),
                Electronics = (Electronics)Electronics.Clone(),
                Fans = Fans.Select(fan => (Fan)fan.Clone()).ToList(),
                Heat = (Heat)Heat.Clone(),
                Job = (Job)Job.Clone(),
                MessageBox = (MessageBox)MessageBox.Clone(),
                Move = (Move)Move.Clone(),
                Network = (Network)Network.Clone(),
                Messages = Messages.Select(item => (Message)item.Clone()).ToList(),
                Scanner = (Scanner)Scanner.Clone(),
                Sensors = (Sensors)Sensors.Clone(),
                Spindles = Spindles.Select(spindle => (Spindle)spindle.Clone()).ToList(),
                State = (State)State.Clone(),
                Storages = Storages.Select(storage => (Storage)storage.Clone()).ToList(),
                Tools = Tools.Select(tool => (Tool)tool.Clone()).ToList()
            };
        }
    }
}